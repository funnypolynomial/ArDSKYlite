#include <Arduino.h>
#include "LCD.h"
#include "Font5x7.h"

// more compact "sideways" version
static const byte kFont5x7[] PROGMEM =
{
  // 0..9,A..Z,a..z
  // 0
  0b11111110,
  0b10000010,
  0b10000010,
  0b10000010,
  0b11111110,
  // 1
  0b00000000,
  0b00000000,
  0b11111110,
  0b01000000,
  0b00100000,
  // 2
  0b11110010,
  0b10010010,
  0b10010010,
  0b10010010,
  0b10011110,
  // 3
  0b11111110,
  0b10010010,
  0b10010010,
  0b10010010,
  0b10010010,
  // 4
  0b11111110,
  0b00010000,
  0b00010000,
  0b00010000,
  0b11110000,
  // 5
  0b10011110,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11110010,
  // 6
  0b10011110,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11111110,
  // 7
  0b11111110,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  // 8
  0b11111110,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11111110,
  // 9
  0b11111110,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11110010,
  // A
  0b01111110,
  0b10010000,
  0b10010000,
  0b10010000,
  0b01111110,
  // B
  0b01101100,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11111110,
  // C
  0b01000100,
  0b10000010,
  0b10000010,
  0b10000010,
  0b01111100,
  // D
  0b00111000,
  0b01000100,
  0b10000010,
  0b10000010,
  0b11111110,
  // E
  0b10000010,
  0b10010010,
  0b10010010,
  0b10010010,
  0b11111110,
  // F
  0b10000000,
  0b10010000,
  0b10010000,
  0b10010000,
  0b11111110,
  // G
  0b01011100,
  0b10010010,
  0b10010010,
  0b10000010,
  0b01111100,
  // H
  0b11111110,
  0b00010000,
  0b00010000,
  0b00010000,
  0b11111110,
  // I
  0b10000010,
  0b10000010,
  0b11111110,
  0b10000010,
  0b10000010,
  // J
  0b10000000,
  0b11111100,
  0b10000010,
  0b00000010,
  0b00000100,
  // K
  0b10000010,
  0b01000100,
  0b00101000,
  0b00010000,
  0b11111110,
  // L
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  0b11111110,
  // M
  0b11111110,
  0b01000000,
  0b00110000,
  0b01000000,
  0b11111110,
  // N
  0b11111110,
  0b00001000,
  0b00010000,
  0b00100000,
  0b11111110,
  // O
  0b01111100,
  0b10000010,
  0b10000010,
  0b10000010,
  0b01111100,
  // P
  0b01100000,
  0b10010000,
  0b10010000,
  0b10010000,
  0b11111110,
  // Q
  0b01111010,
  0b10000100,
  0b10001010,
  0b10000010,
  0b01111100,
  // R
  0b01100010,
  0b10010100,
  0b10011000,
  0b10010000,
  0b11111110,
  // S
  0b01001100,
  0b10010010,
  0b10010010,
  0b10010010,
  0b01100100,
  // T
  0b10000000,
  0b10000000,
  0b11111110,
  0b10000000,
  0b10000000,
  // U
  0b11111100,
  0b00000010,
  0b00000010,
  0b00000010,
  0b11111100,
  // V
  0b11111000,
  0b00000100,
  0b00000010,
  0b00000100,
  0b11111000,
  // W
  0b11111110,
  0b00000100,
  0b00011000,
  0b00000100,
  0b11111110,
  // X
  0b11000110,
  0b00101000,
  0b00010000,
  0b00101000,
  0b11000110,
  // Y
  0b11000000,
  0b00100000,
  0b00011110,
  0b00100000,
  0b11000000,
  // Z
  0b11000010,
  0b10100010,
  0b10010010,
  0b10001010,
  0b10000110,
  // a
  0b00011110,
  0b00101010,
  0b00101010,
  0b00101010,
  0b00000100,
  // b
  0b00011100,
  0b00100010,
  0b00100010,
  0b00100010,
  0b11111110,
  // c
  0b00100010,
  0b00100010,
  0b00100010,
  0b00100010,
  0b00011100,
  // d
  0b11111110,
  0b00100010,
  0b00100010,
  0b00100010,
  0b00011100,
  // e
  0b00010000,
  0b00101010,
  0b00101010,
  0b00101010,
  0b00011100,
  // f
  0b10010000,
  0b10010000,
  0b01111110,
  0b00010000,
  0b00010000,
  // g
  0b00111110,
  0b00100101,
  0b00100101,
  0b00100101,
  0b00011010,
  // h
  0b00011110,
  0b00100000,
  0b00100000,
  0b00100000,
  0b11111110,
  // i
  0b00000010,
  0b00000010,
  0b10111110,
  0b00100010,
  0b00100010,
  // j
  0b00000000,
  0b00000000,
  0b01011110,
  0b00000001,
  0b00000001,
  // k
  0b00100010,
  0b00010100,
  0b00001000,
  0b00001000,
  0b11111110,
  // l
  0b00000000,
  0b00000010,
  0b11111100,
  0b00000000,
  0b00000000,
  // m
  0b00011110,
  0b00100000,
  0b00011110,
  0b00100000,
  0b00111110,
  // n
  0b00011110,
  0b00100000,
  0b00100000,
  0b00100000,
  0b00111110,
  // o
  0b00011100,
  0b00100010,
  0b00100010,
  0b00100010,
  0b00011100,
  // p
  0b00011000,
  0b00100100,
  0b00100100,
  0b00100100,
  0b00111111,
  // q
  0b00111111,
  0b00100100,
  0b00100100,
  0b00100100,
  0b00011000,
  // r
  0b00010000,
  0b00100000,
  0b00100000,
  0b00100000,
  0b00111110,
  // s
  0b00100100,
  0b00101010,
  0b00101010,
  0b00101010,
  0b00010010,
  // t
  0b00100010,
  0b00100010,
  0b11111100,
  0b00100000,
  0b00100000,
  // u
  0b00111110,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00111100,
  // v
  0b00111000,
  0b00000100,
  0b00000010,
  0b00000100,
  0b00111000,
  // w
  0b00111110,
  0b00000010,
  0b00111100,
  0b00000010,
  0b00111100,
  // x
  0b00100010,
  0b00010100,
  0b00001000,
  0b00010100,
  0b00100010,
  // y
  0b00000000,
  0b00111110,
  0b00000101,
  0b00000101,
  0b00111010,
  // z
  0b00100010,
  0b00110010,
  0b00101010,
  0b00100110,
  0b00100010,

  // a few other chars follow, in alphabetical order
  '!',
  0b00000000,
  0b00000000,
  0b11110110,
  0b00000000,
  0b00000000,
  '(',
  0b00000000,
  0b10000010,
  0b01000100,
  0b00111000,
  0b00000000,
  ')',
  0b00000000,
  0b00111000,
  0b01000100,
  0b10000010,
  0b00000000,
  '*',
  0b01010100,
  0b00111000,
  0b11111110,
  0b00111000,
  0b01010100,
  '+',
  0b00010000,
  0b00010000,
  0b11111110,
  0b00010000,
  0b00010000,
  ',',
  0b00000000,
  0b00000000,
  0b00000110,
  0b00000001,
  0b00000000,
  '-',
  0b00010000,
  0b00010000,
  0b00010000,
  0b00010000,
  0b00010000,
  '.',
  0b00000000,
  0b00000000,
  0b00000011,
  0b00000000,
  0b00000000,
  '/',
  0b01000000,
  0b00100000,
  0b00010000,
  0b00001000,
  0b00000100,
  ':',
  0b00000000,
  0b00000000,
  0b01100110,
  0b00000000,
  0b00000000,
  '=',
  0b00101000,
  0b00101000,
  0b00101000,
  0b00101000,
  0b00101000,
  '@',
  0b01111000,
  0b10011001,
  0b10011001,
  0b10000001,
  0b01111110,
  '~',  // approx eq
  0b00000000,
  0b00100000,
  0b00010000,
  0b00100000,
  0b00010000,

  0xFF,  // end
};

byte Font5x7::getRow(char Char, int Line)
{
  int Idx = -1;
  // jump to the right place
  if ('A' <= Char && Char <= 'Z')
    Idx = 5*(Char - 'A' + 10);
  else if ('0' <= Char && Char <= '9')
    Idx = 5*(Char - '0');
  else if ('a' <= Char && Char <= 'z')
    Idx = 5*(Char - 'a' + 10 + 26);
  else if (Char == ' ')
    return 0;
  else
  {
    // search for it
    Idx = 5*(10 + 26 + 26);
    char ch;
    while ((ch = pgm_read_byte_near(kFont5x7 + Idx)) < Char && ch)
      Idx += 6;
    if (ch == Char)
      Idx++;
    else
      return 0;
  }
  
  byte row = 0x00;
  byte mask = 0b10000000 >> Line;
  if (Idx != -1)
    for (int i = 0; i < 5; i++)
      if (pgm_read_byte_near(kFont5x7 + Idx + i) & mask)
       row |= (0x01 << i);
  return row;
}

void Font5x7::drawText(int x, int y, const char* str, word foreground, word background, int scale, bool stretch, bool descenders, int gap)
{
  int rows = FONT5x7_HEIGHT*scale;
  int len = strlen(str);
  if (descenders) 
    rows++;
  else if (stretch)
    rows += 2;  // double rows 2 & 4
  lcd.beginFill(x, y, len*(FONT5x7_WIDTH + gap)*scale, rows);
  for (int row = 0; row < rows; row++)
  {
    int defnRow = row;
    if (stretch)
    {
      if (row >= 3)
        defnRow--;
      if (row >= 6)
        defnRow--;
    }
    for (int ch = 0; ch < len; ch++)
    {
      byte defn = getRow(str[ch], defnRow/scale);
      byte mask = B00010000;
      defn <<= gap;  // blank column AFTER char
      mask <<= gap;
      for (int bit = 0; bit < 5 + gap; bit++)
      {
        if (defn & mask)
          lcd.fillColour(scale, foreground);
        else        
          lcd.fillColour(scale, background);
        mask >>= 1;
      }
    }
  }
}
